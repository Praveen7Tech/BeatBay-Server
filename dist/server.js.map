{"version":3,"sources":["../src/server.ts","../src/framework/express/app.ts","../src/framework/database/models/OtpModel.ts","../src/framework/database/models/UserModel.ts","../src/infrastructure/repositories/UserRepository.ts","../src/infrastructure/service/EmailService.ts","../src/interface-adapters/controllers/users/UserController.ts","../src/use-case/user/UserUseCase.ts","../src/framework/routes/baseRoutes.ts","../src/framework/routes/user/userRoute.ts","../src/framework/database/db.ts"],"sourcesContent":["import dotenv from \"dotenv\";\r\nimport app from \"./framework/express/app.js\"\r\nimport connectDB from \"./framework/database/db.js\";\r\n\r\ndotenv.config();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\nconnectDB();\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`üöÄ Server running on http://localhost:${PORT}`);\r\n});\r\n","import express, { urlencoded } from \"express\";\r\nimport cors from \"cors\";\r\nimport { UserRoutes } from \"../routes/user/userRoute.js\";\r\n\r\nconst app = express();\r\n\r\n// Middlewares\r\napp.use(express.json());\r\napp.use(urlencoded({extended:true}))\r\napp.use(\r\n  cors({\r\n    origin: \"http://localhost:5173\",\r\n    //credentials: true,\r\n  })\r\n);\r\n\r\n// Route\r\nconst userRoutes = new UserRoutes()\r\napp.use(\"/user\",userRoutes.router)\r\n\r\n\r\nexport default app;","import mongoose from \"mongoose\";\r\n\r\nconst OtpSchema = new mongoose.Schema({\r\n  email: { type: String, required: true, unique: true },\r\n  otp: { type: String, required: true },\r\n  createdAt: { type: Date, default: Date.now, expires: 300 } // 5 min expiry\r\n});\r\n\r\nexport default mongoose.model(\"Otp\", OtpSchema);\r\n","import mongoose from \"mongoose\";\r\n\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    name: {\r\n        type:String,\r\n        required:true\r\n    },\r\n    email: {\r\n        type:String,\r\n        required:true,\r\n        unique:true\r\n    },\r\n    password: {\r\n        type:String,\r\n    }\r\n})\r\n\r\nexport default mongoose.model(\"UserModel\", UserSchema)","import type { IUserRepository } from \"../../entities/repositories/IUserRepository.js\";\r\nimport OtpModel from \"../../framework/database/models/OtpModel.js\";\r\nimport UserModel from \"../../framework/database/models/UserModel.js\";\r\n\r\nexport class UserRepository implements IUserRepository {\r\n    async findByEmail(email: string){\r\n        return UserModel.findOne({email})\r\n    }\r\n\r\n    async saveOTP(email: string, otp: string){\r\n        await OtpModel.findOneAndUpdate(\r\n            {email},\r\n            {otp, createdAt: new Date()},\r\n            {upsert: true}\r\n        )\r\n    }\r\n\r\n    async createUser(data :{name: string, email: string, password: string}){\r\n        const user = new UserModel(data)\r\n        user.save()\r\n    }\r\n}","import type { IEmailService } from \"../../entities/services/IEmailService.js\";\r\nimport nodemailer from \"nodemailer\"\r\n\r\n\r\nexport class EmailService implements IEmailService {\r\n    private transporter;\r\n\r\n    constructor(){\r\n        this.transporter = nodemailer.createTransport({\r\n            service:\"gmail\",\r\n            auth:{\r\n                user:process.env.API_EMAIL,\r\n                pass:process.env.EMAIL_PASSWORD\r\n            }\r\n        })\r\n    }\r\n\r\n    async sendOTP(email: string, otp: string): Promise<void> {\r\n        console.log(\"email service reach\",email)\r\n        await this.transporter.sendMail({\r\n            from:process.env.API_EMAIL,\r\n            to:email,\r\n            subject: \"Your OTP Verification code\",\r\n            text: `Your Otp code is : ${otp}`\r\n        })\r\n        console.log(\"email sent success\")\r\n    }\r\n}","import type { Request, Response } from \"express\";\r\nimport type { IUserController } from \"../../../entities/controllerInterface/user/userControllerInterface.js\";\r\nimport type { UserUseCase } from \"../../../use-case/user/UserUseCase.js\";\r\n\r\nexport class UserController implements IUserController {\r\n    constructor(private userUseCase: UserUseCase){}\r\n\r\n    async signup(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const {email} = req.body\r\n            console.log(\"body\",email)\r\n            if(!email){\r\n                res.status(400).json({success: false, message: \"Email required\"})\r\n                return\r\n            }\r\n\r\n            await this.userUseCase.signUp(email)\r\n            res.status(200).json({success: true, message:\"OTP sent\"})\r\n        } catch (error: any) {\r\n            res.status(400).json({success: false, message: error.message})\r\n        }\r\n    }\r\n}","import { error } from \"console\";\r\nimport type { IUserRepository } from \"../../entities/repositories/IUserRepository.js\";\r\nimport type { IEmailService } from \"../../entities/services/IEmailService.js\";\r\n\r\n\r\nexport class UserUseCase {\r\n    constructor(\r\n        private userRepo: IUserRepository,\r\n        private emailService: IEmailService)\r\n    {}\r\n\r\n    async signUp(email: string) : Promise<void> {\r\n        const existUser = await this.userRepo.findByEmail(email)\r\n        if(existUser){\r\n            throw new Error(\"User already exists\")\r\n        }\r\n\r\n        const otp = Math.floor(100000 + Math.random()* 900000).toString()\r\n\r\n        await this.userRepo.saveOTP(email,otp)\r\n        console.log(\"otp save\")\r\n        await this.emailService.sendOTP(email, otp)\r\n        console.log(\"otp sent\")\r\n    }\r\n}","import { Router } from \"express\";\r\n\r\nexport abstract class BaseRoute{\r\n    public router : Router;\r\n\r\n    constructor(){\r\n        this.router = Router()\r\n        this.initializeRoutes()\r\n    }\r\n\r\n    protected abstract initializeRoutes(): void\r\n}","import { UserRepository } from \"../../../infrastructure/repositories/UserRepository.js\";\r\nimport { EmailService } from \"../../../infrastructure/service/EmailService.js\";\r\nimport { UserController } from \"../../../interface-adapters/controllers/users/UserController.js\";\r\nimport { UserUseCase } from \"../../../use-case/user/UserUseCase.js\";\r\nimport { BaseRoute } from \"../baseRoutes.js\";\r\n\r\nconst userRepo = new UserRepository()\r\nconst emailService = new EmailService()\r\nconst userUseCase = new UserUseCase(userRepo,emailService)\r\nconst userController = new UserController(userUseCase)\r\n\r\nexport class UserRoutes extends BaseRoute {\r\n    constructor(){\r\n        super()\r\n    }\r\n    protected initializeRoutes(): void {\r\n        this.router.post(\"/signup\",(req,res)=>{\r\n            userController.signup(req,res)\r\n        })\r\n    }\r\n}","import mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst connectDB = async () => {\r\n  try {\r\n    const mongoUri = process.env.MONGO_URI;\r\n    if (!mongoUri) throw new Error(\"MONGO_URI is not defined in .env\");\r\n\r\n    await mongoose.connect(mongoUri);\r\n    console.log(\"‚úÖ MongoDB Connected\");\r\n  } catch (error) {\r\n    console.error(\"‚ùå DB Connection Error:\", error);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nexport default connectDB;\r\n"],"mappings":"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","names":["dotenv","mongoose","userUseCase","userRepo","emailService","mongoose","dotenv"]}